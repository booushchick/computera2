Chess board program



Here is a link to the assignment: www.cs.sfu.ca/CourseCentral/128/jregan/assignments/ass2/assignment2.html



Here is my code so far, I'm missing a few functions and main statements: 



#include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>
#include <ctime>

//cylindrical board 

using namespace std;

const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72; 
const int NOPLAYER = 0;
const int WHITEWINS = 1;
const int REDWINS = 2;
const int NOONEWINS = 0;
const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;
const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
                            int numRowsInBoard );

void DisplayBoard( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard);

int CountJumps( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[], int yLocArray[] );

bool CheckList( int inArray1[], int inArray2[], int xIndex, int yindex);

int CountMove1Squares( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[],  int yLocArray[] );

bool IsMove1Square( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLoc, int yLoc);

bool IsJump( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLoc, int yLoc); // needs to implement cylindrically

bool MakeMove( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int fromSquareNum,
int toSquareNum, bool &jumped );

bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);

int main () {

const int MAX_PIECES = 72;

int xIndicesMove[MAX_PIECES];
int yIndicesMove[MAX_PIECES];
int myCMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE] = {};
int xIndicesJump[MAX_PIECES];
int yIndicesJump[MAX_PIECES];

int numRowsInBoard = 0;
int tries = 0;

for (tries = 0; tries <= 3; tries++) {

cout << "Enter the number of squares along each edge of the board: ";
if(!(cin >> numRowsInBoard)) {

cerr << "ERROR: Board size is not an integer " << endl; 
cerr << MIN_ARRAY_SIZE << " <= number of squares <= " << MAX_ARRAY_SIZE << " ";

}
else if (numRowsInBoard > 18) {

cerr << "ERROR: Board size too large " << endl;
cerr << MIN_ARRAY_SIZE << " <= number of squares <= " << MAX_ARRAY_SIZE << " ";

}
else if (numRowsInBoard < 8) { 

cerr << "ERROR: Board size too small " << endl;
cerr << MIN_ARRAY_SIZE << " <= number of squares <= " << MAX_ARRAY_SIZE << " ";

}
else if (numRowsInBoard%2 == 1) { 

cerr << "ERROR: Board size is odd " << endl;
cerr << MIN_ARRAY_SIZE << " <= number of squares <= " << MAX_ARRAY_SIZE << " ";

}
else { break; }
}


if (tries == 3) { "ERROR: Too many errors entering the size of the board";

return 1;
}

InitializeBoard(myCMCheckersBoard, numRowsInBoard);

DisplayBoard(myCMCheckersBoard, numRowsInBoard);

bool whiteTurn = true;

while (true) {

if (whiteTurn && CountJumps(myCMCheckersBoard, numRowsInBoard, 1, xIndicesJump, yIndicesJump) == 0 && CountMove1Squares(myCMCheckersBoard, numRowsInBoard, 1, xIndicesMove, yIndicesMove) == 0) {

cout << "White is unable to move" << endl;
cout << "GAME OVER, Red has won" << endl;
cout << "Enter any character to close the game" << endl;

cin.get();

return 0;

}

if (!whiteTurn && CountJumps(myCMCheckersBoard, numRowsInBoard, 2, xIndicesJump, yIndicesJump) == 0 && CountMove1Squares(myCMCheckersBoard, numRowsInBoard, 2, xIndicesMove, yIndicesMove) == 0) {

cout << "Red is unable to move" << endl;
cout << "GAME OVER, White has won" << endl;
cout << "Enter any character to close the game" << endl;

cin.get();

return 0;

}

if (whiteTurn) {

cout << "White takes a turn" << endl;

cin.get();

}
else {

cout << "Red takes a turn" << endl;

cin.get();

}

}

return 0;

}

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
                            int numRowsInBoard ) 
 
{
for (int i = 1; i < numRowsInBoard; i = i + 2) {

CMCheckersBoard[0][i] = 2;

}

for (int i = 0; i < numRowsInBoard; i = i + 2) {

CMCheckersBoard[numRowsInBoard-1][i] = 5;

}

for (int i = 1; i < 4; i++) {

for (int j = 0; j < numRowsInBoard; j++) {

if (i % 2 == 0 && j % 2 == 1) {

CMCheckersBoard[i][j] = 1;

}
else if(i % 2 == 1 && j % 2 == 0) {
CMCheckersBoard[i][j] = 1;
}
}
}

for (int i = numRowsInBoard-4; i < numRowsInBoard-1; i++) {

for (int j = 0; j < numRowsInBoard; j++) {

if (i % 2 == 0 && j % 2 == 1) {

CMCheckersBoard[i][j] = 4;

}
else if(i % 2 == 1 && j % 2 == 0) {
CMCheckersBoard[i][j] = 4;
}
}
}
}

void DisplayBoard( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard) {

for (int i = 0; i< numRowsInBoard; i++) {

for (int j = 0; j < numRowsInBoard; j++) {

if (CMCheckersBoard[i][j] == 1) {
cout << "WS ";

}

else if (CMCheckersBoard[i][j] == 2) {

cout << "WM ";

}
else if (CMCheckersBoard[i][j] == 3) {

cout << "WK ";

}
else if (CMCheckersBoard[i][j] == 4) {

cout << "RS ";

}
else if (CMCheckersBoard[i][j] == 5) {

cout << "RM ";

}
else if (CMCheckersBoard[i][j] == 6) {

cout << "RK ";

}
else {

cout << i*numRowsInBoard + j << " ";

}
}
cout << endl;
}

}

int CountJumps( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[], int yLocArray[] )

{
for (int i = 0; i < MAX_PIECES; i++) {

xLocArray[i] = -1;
yLocArray[i] = -1;

}

int counter = 0;

for (int i = 0; i < numRowsInBoard; i++) {

for (int j = 0; j < numRowsInBoard; j++) {

if (player == 1 && CMCheckersBoard[i][j] == 1 || CMCheckersBoard[i][j] == 2 || CMCheckersBoard[i][j] == 3) {

if (IsJump(CMCheckersBoard, numRowsInBoard, 1, j, i)) {

xLocArray[counter] = j;
yLocArray[counter] = i;

counter++;

}

}

else if (player == 2 && CMCheckersBoard[i][j] == 4 || CMCheckersBoard[i][j] == 5 || CMCheckersBoard[i][j] == 6) {

if (IsJump(CMCheckersBoard, numRowsInBoard, 2, j, i)) {

xLocArray[counter] = j;
yLocArray[counter] = i;

counter++;

}

}
}

}

return counter;
}

bool IsJump( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLoc, int yLoc)

{
if (player == 1) { //white player

if (xLoc == 0) { // if leftmost column
if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc][xLoc] == 6)) {

if (CMCheckersBoard[yLoc + 2][xLoc + 2] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && ((CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 4 || CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 5 || CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 6))) {

if (CMCheckersBoard[yLoc + 2][numRowsInBoard - 2] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc][xLoc] == 6)) {

if (CMCheckersBoard[yLoc - 2][xLoc + 2] == 0) {

return true;

}

}

else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 4 || CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 5 || CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 6)) {

if (CMCheckersBoard[yLoc - 2][numRowsInBoard - 2] == 0) {

return true;

}
}

}
else if (xLoc == numRowsInBoard - 1) { //rightmost column

if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][0] == 4 || CMCheckersBoard[yLoc - 1][0] == 5 || CMCheckersBoard[yLoc - 1][0] == 6)) {

if (CMCheckersBoard[yLoc - 2][xLoc + 2] == 0) {

return true;

}

}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc][xLoc] == 6)) {

if (CMCheckersBoard[yLoc + 2][1] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][0] == 4 || CMCheckersBoard[yLoc - 1][0] == 5 || CMCheckersBoard[yLoc - 1][0] == 6)) {

if (CMCheckersBoard[yLoc - 2][1] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc - 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 5 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 6)) {

if (CMCheckersBoard[yLoc - 2][xLoc - 2] == 0) {

return true;

}
}
}
else {
if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 6)) {

if (CMCheckersBoard[yLoc + 2][(xLoc + 2)%numRowsInBoard] == 0) {

return true;

}

}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc - 1] == 4 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 5 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 6)) {
if (xLoc == 1) {

if (CMCheckersBoard[yLoc + 2][numRowsInBoard - 1] == 0) {

return true;

}
}
else if (CMCheckersBoard[yLoc + 2][xLoc - 2] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 6)) {

if (CMCheckersBoard[yLoc - 2][(xLoc + 2)%numRowsInBoard] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc - 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 5 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 6)) {
if (xLoc == 1 ) {
if (CMCheckersBoard[yLoc - 2][numRowsInBoard -1] == 0) {

return true;

}
}
else if (CMCheckersBoard[yLoc - 2][xLoc - 2] == 0) {

return true;

}
}

}
if (CMCheckersBoard[yLoc][xLoc] == 1 || CMCheckersBoard[yLoc][xLoc] == 2 || CMCheckersBoard[yLoc][xLoc] == 3) {

if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 6)) {

if (CMCheckersBoard[yLoc + 2][xLoc + 2] == 0) {

return true;

}

}

else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc - 1] == 4 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 5 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 6)) {

if (CMCheckersBoard[yLoc + 2][xLoc - 2] == 0) {

return true;

}

}

else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc + 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 5 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 6 )) {

if (CMCheckersBoard[yLoc - 2][xLoc + 2] == 0) {

return true;

}
}

else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc - 1] == 4 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 5 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 6 )) {

if (CMCheckersBoard[yLoc - 2][xLoc - 2] == 0) {

return true;

}
}

}

}

else {//red player

if (xLoc == 0) { // if leftmost column
if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc + 1] == 1 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 2 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 3)) {

if (CMCheckersBoard[yLoc + 2][xLoc + 2] == 0) {

return true;

}
}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 1 || CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 2 || CMCheckersBoard[yLoc - 1][numRowsInBoard - 1] == 3)) {

if (CMCheckersBoard[yLoc - 2][numRowsInBoard - 2] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 1 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 2 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 3)) {

if (CMCheckersBoard[yLoc + 2][xLoc + 2] == 0) {

return true;

}

}

else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 1 || CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 2 || CMCheckersBoard[yLoc + 1][numRowsInBoard - 1] == 3)) {

if (CMCheckersBoard[yLoc + 2][numRowsInBoard - 2] == 0) {

return true;

}
}

}
else if (xLoc == numRowsInBoard - 1) { //rightmost column

if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][0] == 1 || CMCheckersBoard[yLoc - 1][0] == 2 || CMCheckersBoard[yLoc - 1][0] == 3)) {

if (CMCheckersBoard[yLoc - 2][1] == 0) {

return true;

}

}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc - 1] == 1 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 2 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 3)) {

if (CMCheckersBoard[yLoc - 2][xLoc - 2] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][0] == 1 || CMCheckersBoard[yLoc + 1][0] == 2 || CMCheckersBoard[yLoc + 1][0] == 3)) {

if (CMCheckersBoard[yLoc + 2][1] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc - 1] == 1 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 2 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 3)) {

if (CMCheckersBoard[yLoc + 2][xLoc - 2] == 0) {

return true;

}
}
}
else {
if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc + 1] == 1 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 2 || CMCheckersBoard[yLoc - 1][xLoc + 1] == 3)) {

if (CMCheckersBoard[yLoc - 2][(xLoc + 2)%numRowsInBoard] == 0) {

return true;

}

}
else if (yLoc > 1 && (CMCheckersBoard[yLoc - 1][xLoc - 1] == 1 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 2 || CMCheckersBoard[yLoc - 1][xLoc - 1] == 3)) {
if (xLoc == 1) {

if (CMCheckersBoard[yLoc - 2][numRowsInBoard - 1] == 0) {

return true;

}
}
else if (CMCheckersBoard[yLoc - 2][xLoc - 2] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc + 1] == 1 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 2 || CMCheckersBoard[yLoc + 1][xLoc + 1] == 3)) {

if (CMCheckersBoard[yLoc + 2][(xLoc + 2)%numRowsInBoard] == 0) {

return true;

}
}
else if (yLoc < numRowsInBoard - 2 && (CMCheckersBoard[yLoc + 1][xLoc - 1] == 1 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 2 || CMCheckersBoard[yLoc + 1][xLoc - 1] == 3)) {
if (xLoc == 1 ) {

if (CMCheckersBoard[yLoc + 2][numRowsInBoard - 1] == 0) {

return true;

}
}
else if (CMCheckersBoard[yLoc + 2][xLoc - 2] == 0) {

return true;

}
}
return false;
}

}

}

int CountMove1Squares( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[],  int yLocArray[] ) {


for (int i = 0; i < MAX_PIECES; i++) {

xLocArray[i] = -1;
yLocArray[i] = -1;

}

int counter = 0;

for (int i = 0; i < numRowsInBoard; i++) {

for (int j = 0; j < numRowsInBoard; j++) {

if (player == 1 && (CMCheckersBoard[i][j] == 1 || CMCheckersBoard[i][j] == 2) && !(IsJump(CMCheckersBoard, numRowsInBoard, 1, j, i))) {

if (CMCheckersBoard[i + 1][j - 1] == 0) {

counter++;

}


if (CMCheckersBoard[i+1][j+1] == 0) {

counter++;

}

}

else if (player == 1 && CMCheckersBoard[i][j] == 3 && !(IsJump(CMCheckersBoard, numRowsInBoard, 1, j, i))) {

if (CMCheckersBoard[i + 1][j - 1] == 0) {

counter++;

}


if (CMCheckersBoard[i+1][j+1] == 0) {

counter++;

}


}
else if (player == 2 && !(IsJump(CMCheckersBoard, numRowsInBoard, 1, j, i))) {

if (CMCheckersBoard[i + 1][j - 1] == 0) {

counter++;

}


if (CMCheckersBoard[i+1][j+1] == 0) {

counter++;

}

}
}
}
return counter;
}



Help would be highly appreciated, please get back to me!
